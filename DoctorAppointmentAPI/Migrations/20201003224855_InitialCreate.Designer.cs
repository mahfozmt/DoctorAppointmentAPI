// <auto-generated />
using System;
using DoctorAppointmentAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DoctorAppointmentAPI.Migrations
{
    [DbContext(typeof(AppoinmentDbContext))]
    [Migration("20201003224855_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DoctorAppointmentAPI.Models.Chamber", b =>
                {
                    b.Property<int>("ChamberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.HasKey("ChamberId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Chambers");
                });

            modelBuilder.Entity("DoctorAppointmentAPI.Models.DeasisHistory", b =>
                {
                    b.Property<int>("DeasisHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeasisHistories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PateintId")
                        .HasColumnType("int");

                    b.HasKey("DeasisHistoryId");

                    b.HasIndex("PateintId");

                    b.ToTable("DeasisHistories");
                });

            modelBuilder.Entity("DoctorAppointmentAPI.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BMDCNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SpeacializationId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.HasIndex("GenderId");

                    b.HasIndex("SpeacializationId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DoctorAppointmentAPI.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenderName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderId");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            GenderId = 1,
                            GenderName = "Male"
                        },
                        new
                        {
                            GenderId = 2,
                            GenderName = "Female"
                        });
                });

            modelBuilder.Entity("DoctorAppointmentAPI.Models.Pateint", b =>
                {
                    b.Property<int>("PateintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("PateintId");

                    b.HasIndex("GenderId");

                    b.ToTable("Pateints");

                    b.HasData(
                        new
                        {
                            PateintId = 1,
                            Age = 25,
                            GenderId = 1,
                            MobileNumber = "01758091506",
                            Name = "Mahfozur Rahman"
                        },
                        new
                        {
                            PateintId = 2,
                            Age = 42,
                            GenderId = 1,
                            MobileNumber = "01745632145",
                            Name = "Wahidur Rahman"
                        },
                        new
                        {
                            PateintId = 3,
                            Age = 27,
                            GenderId = 1,
                            MobileNumber = "01652147896",
                            Name = "Masum Billah"
                        },
                        new
                        {
                            PateintId = 4,
                            Age = 25,
                            GenderId = 2,
                            MobileNumber = "01758091506",
                            Name = "Shanta Jahan"
                        },
                        new
                        {
                            PateintId = 5,
                            Age = 21,
                            GenderId = 2,
                            MobileNumber = "05616515651",
                            Name = "Moushumi Akter"
                        },
                        new
                        {
                            PateintId = 6,
                            Age = 23,
                            GenderId = 1,
                            MobileNumber = "464864864685",
                            Name = "Wali Ullah"
                        },
                        new
                        {
                            PateintId = 7,
                            Age = 22,
                            GenderId = 1,
                            MobileNumber = "5664666155",
                            Name = "Sadik Rahman"
                        },
                        new
                        {
                            PateintId = 8,
                            Age = 24,
                            GenderId = 2,
                            MobileNumber = "011565668466",
                            Name = "Happy Rose"
                        },
                        new
                        {
                            PateintId = 9,
                            Age = 35,
                            GenderId = 2,
                            MobileNumber = "01475656526",
                            Name = "Rita Sheikh"
                        },
                        new
                        {
                            PateintId = 10,
                            Age = 30,
                            GenderId = 1,
                            MobileNumber = "019215666245",
                            Name = "Selim Sheikh"
                        },
                        new
                        {
                            PateintId = 11,
                            Age = 25,
                            GenderId = 2,
                            MobileNumber = "01754152632",
                            Name = "Aleya Ferdaus"
                        });
                });

            modelBuilder.Entity("DoctorAppointmentAPI.Models.RoasterOfDoctor", b =>
                {
                    b.Property<int>("RoasterOfDoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChamberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("EstimatedPateintNumber")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TimeStart")
                        .HasColumnType("time");

                    b.HasKey("RoasterOfDoctorId");

                    b.HasIndex("ChamberId");

                    b.HasIndex("DoctorId");

                    b.ToTable("RoasterOfDoctors");
                });

            modelBuilder.Entity("DoctorAppointmentAPI.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DoctorAppointmentAPI.Models.Serial", b =>
                {
                    b.Property<int>("SerialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PateintId")
                        .HasColumnType("int");

                    b.Property<int>("RoasterOfDoctorId")
                        .HasColumnType("int");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.HasKey("SerialId");

                    b.HasIndex("PateintId");

                    b.HasIndex("RoasterOfDoctorId");

                    b.ToTable("Serials");
                });

            modelBuilder.Entity("DoctorAppointmentAPI.Models.Speacialization", b =>
                {
                    b.Property<int>("SpeacializationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SpeacializationDepartment")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("SpeacializationId");

                    b.ToTable("Speacializations");

                    b.HasData(
                        new
                        {
                            SpeacializationId = 1,
                            SpeacializationDepartment = "Aerospace Medicine"
                        },
                        new
                        {
                            SpeacializationId = 2,
                            SpeacializationDepartment = "Bariatric Surgery "
                        },
                        new
                        {
                            SpeacializationId = 3,
                            SpeacializationDepartment = "Cardiology - Interventional "
                        },
                        new
                        {
                            SpeacializationId = 4,
                            SpeacializationDepartment = "Cardiology - Non Interventional "
                        },
                        new
                        {
                            SpeacializationId = 5,
                            SpeacializationDepartment = "Cardiothoracic And Vascular Surgery "
                        },
                        new
                        {
                            SpeacializationId = 6,
                            SpeacializationDepartment = "Centre For Spinal Diseases "
                        },
                        new
                        {
                            SpeacializationId = 7,
                            SpeacializationDepartment = "Clinical Haematology And BMT "
                        },
                        new
                        {
                            SpeacializationId = 8,
                            SpeacializationDepartment = "Corneal Transplant "
                        },
                        new
                        {
                            SpeacializationId = 9,
                            SpeacializationDepartment = "Critical Care Medicine "
                        },
                        new
                        {
                            SpeacializationId = 10,
                            SpeacializationDepartment = "Dermatology And Cosmetology "
                        },
                        new
                        {
                            SpeacializationId = 11,
                            SpeacializationDepartment = "Ear Nose Throat Head And Neck Surgery "
                        },
                        new
                        {
                            SpeacializationId = 12,
                            SpeacializationDepartment = "Emergency Medicine "
                        },
                        new
                        {
                            SpeacializationId = 13,
                            SpeacializationDepartment = "Endocrinology "
                        },
                        new
                        {
                            SpeacializationId = 14,
                            SpeacializationDepartment = "General Surgery "
                        },
                        new
                        {
                            SpeacializationId = 15,
                            SpeacializationDepartment = "Infectious Diseases "
                        },
                        new
                        {
                            SpeacializationId = 16,
                            SpeacializationDepartment = "Internal Medicine "
                        },
                        new
                        {
                            SpeacializationId = 17,
                            SpeacializationDepartment = "In-Vitro Fertilisation (IVF) "
                        },
                        new
                        {
                            SpeacializationId = 18,
                            SpeacializationDepartment = "Laboratory Medicine "
                        },
                        new
                        {
                            SpeacializationId = 19,
                            SpeacializationDepartment = "Liver Transplant & Hepatic Surgery "
                        },
                        new
                        {
                            SpeacializationId = 20,
                            SpeacializationDepartment = "Maxillofacial Surgery "
                        },
                        new
                        {
                            SpeacializationId = 21,
                            SpeacializationDepartment = "Medical Gastroenterology "
                        },
                        new
                        {
                            SpeacializationId = 22,
                            SpeacializationDepartment = "Medical Oncology & Clinical Hematology "
                        },
                        new
                        {
                            SpeacializationId = 23,
                            SpeacializationDepartment = "Medical Oncology "
                        },
                        new
                        {
                            SpeacializationId = 24,
                            SpeacializationDepartment = "Minimally Invasive Gynecology "
                        },
                        new
                        {
                            SpeacializationId = 25,
                            SpeacializationDepartment = "Neonatology "
                        },
                        new
                        {
                            SpeacializationId = 26,
                            SpeacializationDepartment = "Nephrology "
                        },
                        new
                        {
                            SpeacializationId = 27,
                            SpeacializationDepartment = "Neuro Modulation "
                        },
                        new
                        {
                            SpeacializationId = 28,
                            SpeacializationDepartment = "Nutrition & Dietetics "
                        },
                        new
                        {
                            SpeacializationId = 29,
                            SpeacializationDepartment = "Neurology "
                        },
                        new
                        {
                            SpeacializationId = 30,
                            SpeacializationDepartment = "Neurosurgery "
                        },
                        new
                        {
                            SpeacializationId = 31,
                            SpeacializationDepartment = "Obstetrics And Gynecology "
                        },
                        new
                        {
                            SpeacializationId = 32,
                            SpeacializationDepartment = "Ophthalmology "
                        },
                        new
                        {
                            SpeacializationId = 33,
                            SpeacializationDepartment = "Orthopedics & Joint Replacement "
                        },
                        new
                        {
                            SpeacializationId = 34,
                            SpeacializationDepartment = "Pain Management "
                        },
                        new
                        {
                            SpeacializationId = 35,
                            SpeacializationDepartment = "Pediatric Surgery "
                        },
                        new
                        {
                            SpeacializationId = 36,
                            SpeacializationDepartment = "Physiotherapy "
                        },
                        new
                        {
                            SpeacializationId = 37,
                            SpeacializationDepartment = "Plastic Surgery "
                        },
                        new
                        {
                            SpeacializationId = 38,
                            SpeacializationDepartment = "Psychiatry "
                        },
                        new
                        {
                            SpeacializationId = 39,
                            SpeacializationDepartment = "Pulmonology "
                        },
                        new
                        {
                            SpeacializationId = 40,
                            SpeacializationDepartment = "Renal Transplant "
                        },
                        new
                        {
                            SpeacializationId = 41,
                            SpeacializationDepartment = "Reproductive Medicine & IVF "
                        },
                        new
                        {
                            SpeacializationId = 42,
                            SpeacializationDepartment = "Rheumatology "
                        },
                        new
                        {
                            SpeacializationId = 43,
                            SpeacializationDepartment = "Robotic Surgery "
                        },
                        new
                        {
                            SpeacializationId = 44,
                            SpeacializationDepartment = "Surgical Gastroenterology "
                        },
                        new
                        {
                            SpeacializationId = 45,
                            SpeacializationDepartment = "Surgical Oncology "
                        },
                        new
                        {
                            SpeacializationId = 46,
                            SpeacializationDepartment = "Urology "
                        },
                        new
                        {
                            SpeacializationId = 47,
                            SpeacializationDepartment = "Vascular and endovascular surgery "
                        },
                        new
                        {
                            SpeacializationId = 48,
                            SpeacializationDepartment = "Anaesthesia"
                        });
                });

            modelBuilder.Entity("DoctorAppointmentAPI.Models.tblUser", b =>
                {
                    b.Property<int>("tblUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("tblUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DoctorAppointmentAPI.Models.Chamber", b =>
                {
                    b.HasOne("DoctorAppointmentAPI.Models.Doctor", "Doctor")
                        .WithMany("Chambers")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorAppointmentAPI.Models.DeasisHistory", b =>
                {
                    b.HasOne("DoctorAppointmentAPI.Models.Pateint", "Pateint")
                        .WithMany("DeasisHistories")
                        .HasForeignKey("PateintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorAppointmentAPI.Models.Doctor", b =>
                {
                    b.HasOne("DoctorAppointmentAPI.Models.Gender", "Gender")
                        .WithMany("Doctors")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorAppointmentAPI.Models.Speacialization", "Speacialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpeacializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorAppointmentAPI.Models.Pateint", b =>
                {
                    b.HasOne("DoctorAppointmentAPI.Models.Gender", "Gender")
                        .WithMany("Pateints")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorAppointmentAPI.Models.RoasterOfDoctor", b =>
                {
                    b.HasOne("DoctorAppointmentAPI.Models.Chamber", "Chamber")
                        .WithMany("RoasterOfDoctors")
                        .HasForeignKey("ChamberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorAppointmentAPI.Models.Doctor", "Doctor")
                        .WithMany("RoasterOfDoctors")
                        .HasForeignKey("DoctorId");
                });

            modelBuilder.Entity("DoctorAppointmentAPI.Models.Serial", b =>
                {
                    b.HasOne("DoctorAppointmentAPI.Models.Pateint", "Pateint")
                        .WithMany("Serials")
                        .HasForeignKey("PateintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorAppointmentAPI.Models.RoasterOfDoctor", "RoasterOfDoctor")
                        .WithMany("Serials")
                        .HasForeignKey("RoasterOfDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorAppointmentAPI.Models.tblUser", b =>
                {
                    b.HasOne("DoctorAppointmentAPI.Models.Role", "Roles")
                        .WithMany("tblUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
